/*
 * ourchildren.js
 * 
 * copyright (c) 2009, Diego Che
 *
 * For our children.
 */
 
(function() {
     
this.OurChildren = {
    children: [],  // has been parse and generated by a Ruby script.
    
    matchedNames: [],
    slideStack: [], // used to keep the order of sliding names.
    maxSlideStackSize: 4,
    sliding: false,
    slideTime: 14500,
    searchString: "",
    
    // Names are splitted into multiple lists to reduce display time.
    listNumber: 17,
    
    p: null,
    
    initCanvas: function() {
        this.p = Processing("sky");
        this.p.size(700, 100);
    },
    
    riseAStar: function() {
        if (this.children.length == 0) {
            return;
        }
        var i = this.randomInt(this.children.length);
        var child = this.children[i];
        var div = this.buildName(child);
        
        var speed = this.lifeSpan(child.age) + this.randomInt(2000);
        var height = $('#stars:first').height() - 60;
        var width = $('#stars:first').width();
        
        var hor = this.randomInt(width);
        if (hor * 2 > width) {
            $(div).css('right', (width - hor).toString() + 'px');
        } else {
            $(div).css('left', hor.toString() + 'px')
        }
        
        $('#stars').append($(div));
        $(div).oneTime(speed, function() {
            $(this).remove();
            OurChildren.starShines();
        });
        $(div).animate({
                bottom:'+='.concat(height / 2),
                opacity:1.0
            },speed / 2);
        $(div).animate({
                bottom:'+='.concat(height / 2),
                opacity:0.0
            },speed / 2);
    },
    
    // return an Array of random ordered numbers, shuffled by Knuth algorithm.
    shuffleList: function(number) {
        var na = [];
        var i = 0;
        while (i < number) {
            na.push(i++);
        }
        
        i = number;
        while (i > 2) {
            var r = this.randomInt(number) + 1;
            if (i != r) {
                var o = na[i - 1];
                na[i - 1] = na[r - 1];
                na[r - 1] = o;
            }
            i--;
        }
        return na;
    },
    
    randomInt: function(upper) {
        return Math.floor(Math.random() * upper);
    },
    
    lifeSpan: function(age) {
        if (typeof age != 'number' || isNaN(age) || age <= 0) {
            return 12000;
        }
        return 8000 + age * 200;
    },
    
    genderColor: function(gender) {
        return (gender == "male") ? ("#ddddff") : ("#ffffff");
    },
    
    ageString: function(age) {
        if (typeof age != 'number' || isNaN(age) || age <= 0) {
            return null;
        }
        return age.toString() + "岁";
    },
    
    // draw a star using Processing.js
    starShines: function(pos) {
    },
    
    genderName: function(gender) {
        if (gender == "male") {
            return "男";
        } else if (gender == "female") {
            return "女";
        }
        return "";
    },
    
    schoolInfo: function(child) {
         if (!child.school) return nil;
         var div = $('<div/>').attr('class', 'info');
         var school = $('<span/>').text(child.school);
         $(div).append(school);
         if (child.grade) {
             var grade = $('<span/>').text(child.grade);
             $(div).append(grade);
         } 
         if (child.class_) {
             var class_ = $('<span/>').text(child.class_);
             $(div).append(class_);
         }
         return $(div);
    },
    
    buildName: function(child) {
        var div = $('<div/>').attr('class', 'child').css('opacity', '0.0');
        var name = $('<span/>').attr('class', 'name').text(child.name).css('color', this.genderColor(child.gender));
        var age = $('<span/>').attr('class', 'age').text(this.ageString(child.age));
        $(div).append(name).append(age);
        
        if (child.school) {
            $(div).append(this.schoolInfo(child));
        }
        
        return $(div);
    },
    
    downloadNames: function() {
        var na = this.shuffleList(this.listNumber);
        var fn = function(data) {
            var shouldStart = OurChildren.children.length == 0;
            jQuery.merge(OurChildren.children, data.children);
            $("#howmanychildren").text(OurChildren.children.length.toString() + "名");
            
            if (shouldStart) {
                OurChildren.riseAStar();
                $(window).everyTime(3000, "riseStars", function() {
                    OurChildren.riseAStar();
                });
                
                OurChildren.slideNames();
                $(window).everyTime(6000, "slideNames", function() {
                    OurChildren.slideNames();
                });
            }
        };
        
        for (var i = 0; i < this.listNumber; i++) {
            jQuery.getJSON("names/OurChildren".concat(na[i]).concat(".json"), fn);
        }
    },
    
    showInfoForChild: function(c) {
        // build slide info.
        var child = this.children[$(c).data("index")];       
        $(".slide_info").html(child.name);
    },
    
    findChildren: function(str) {
        if (str == this.searchString) {
            return;
        }
        
        // reject non-chinese chars
        if (str.match("[a-zA-Z0-9_]")) {
            return;
        }
        
        this.searchString = str;
        
        var re = new RegExp(str);
        var ia = [];
        // update matchedNames
        jQuery.each(this.children, function(idx) {
            if (re.test(this.name)) {
                ia.push(idx);
            }
        });
        this.matchedNames = ia;
        
        if (ia.length != 0) {
            jQuery.each(this.slideStack, function(idx) {
                if (!re.test($(this).data("name"))) {
                    OurChildren.slideStack[idx] = null;
                    $(this).stopTime("remove");
                    $(this).stopTime("fadeOut");
                    $(this).stopTime("showInfo");
                    if ($(this).hasClass("slide_name_hover")) {
                        $(".slide_info").animate({opacity: 0.0}, "slow");
                    }
                    $(this).remove();
                }
            });
        }
        
        if (ia.length > 0 && ia.length <= this.maxSlideStackSize) {
            if (this.sliding) {
                $(window).stopTime("slideNames");
                this.sliding = false;                
            }
            
            // show names not in slide stack.
            var idxar = [];
            for (var c in this.slideStack) {
                if (this.slideStack[c] == null) continue;
                
                var idx = $(this.slideStack[c]).data("index");
                idxar.push(idx);
            }
            for (var i in this.matchedNames) {
                if (jQuery.inArray(this.matchedNames[i], idxar) == -1) {
                    this.slideName(this.matchedNames[i]);
                }
            }
            
            // compact slideStack;
            var na = [];
            for (var c in this.slideStack) {
                if (this.slideStack[c] != null) {
                    na.push(this.slideStack[c]);
                    $(this.slideStack[c]).stopTime("remove");
                    $(this.slideStack[c]).stopTime("fadeOut");
                    $(this.slideStack[c]).stopTime("showInfo");
                }
            }
            this.slideStack = na;
            $(".slide_name").stop();
            
            $(".slide_name").mouseenter(function() {
                $(".slide_name_hover").removeClass("slide_name_hover");
                $(this).addClass("slide_name_hover");
                OurChildren.showInfoForChild(this);
            });
            
            var rightOffset = 0;
            var width = $("#container").width();
            
            for (i = 0; i < this.matchedNames.length; i++) {
                var c = this.slideStack[i];
                if (i == 0) {
                    rightOffset = width - $(c).width() - 24;    // add the padding.
                    if (!$(c).hasClass("slide_name_hover")) {
                        $(c).addClass("slide_name_hover");
                        this.showInfoForChild(c);
                        $(".slide_info").animate({opacity: 1.0}, "slow");
                    }
                } else {
                    rightOffset -= $(c).width() + 36;
                }
                $(c).css("right", rightOffset).animate({
                    opacity: 1.0
                }, 3000);
            }
        } else if (! this.sliding) {
            $(".slide_info").animate({opacity: 0.0}, 3000);
            for (var i in this.slideStack) {
                $(this.slideStack[i]).fadeOut(3000).oneTime(3000, function() {
                    $(this).remove();
                });
            }
            this.slideStack = [];
            
            OurChildren.slideNames();
            $(window).everyTime(6000, "slideNames", function() {
                OurChildren.slideNames();
            });            
        }
    },
    
    slideName: function(i) {
        var name = this.children[i].name;        
        var sn = $("<div/>").attr('class', 'slide_name').css('opacity', '0.0').text(name);
        $("#container").append(sn);
        this.slideStack.push(sn);
        $(sn).data("name", name);
        $(sn).data("index", i);
        
        $(sn).animate({
            right: "+=".concat($("#container").width() - $(sn).width() - 24),
            opacity: 1.0
        }, this.slideTime, "linear");
        $(sn).oneTime(this.slideTime, "showInfo", function() {
            $(this).addClass("slide_name_hover");
            OurChildren.showInfoForChild(this);
            $(".slide_info").animate({opacity: 1.0}, "normal");
        });
        $(sn).oneTime(this.slideTime + 2500, "fadeOut", function() {
           $(this).fadeOut(1000);
           $(".slide_info").animate({opacity: 0.0}, 1000);
        });
        $(sn).oneTime(this.slideTime + 3500, "remove", function() {
           $(this).remove();
           OurChildren.slideStack.shift();
        });
    },
    
    slideNames: function() {
        if(this.children.length == 0) {
            return;
        }
        this.sliding = true;
        
        var shown = false;
        if (this.matchedNames.length == 0) {
            var i = this.randomInt(this.children.length);
        } else { 
            do {
                shown = false;
                var i = this.matchedNames[this.randomInt(this.matchedNames.length)];
                for (var idx in this.slideStack) {
                    var c = this.slideStack[idx];
                    if ($(c).data("index") == i) {
                        shown = true;
                        break;
                    }
                }      
            } while (false);    
        }
        this.slideName(i);
    }
};

OurChildren.downloadNames();

})();

